#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLo
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall")
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(model.path,nl.obj=nl.obj)
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall")
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(model.path,nl.obj=nl.obj)
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall") # to quit NetLogo
stall.packages("RNetLogo")
#install.packages("rJava")
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(model.path,nl.obj=nl.obj)
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall")
nstall.packages("rJava")
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(model.path,nl.obj=nl.obj)
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall") # to quit NetLogo
#install.packages("rJava")
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(model.path,nl.obj=nl.obj)
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall") #
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall") # to quit NetLogo
##NOTE: Once an instance of NetLogo has been opened, the program can be closed using the above command.
##Starting a new instance of NetLogo will require closing the current R session and startign again.
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(mod
###############################################################################################
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall")
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(model.path,nl.obj=nl.obj)
##
###############################################################################################
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall") # to quit NetLogo
##NOTE: Once an instance of NetLogo has been opened, the program can be closed using the above command.
##S
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(model.path,nl.obj=nl.obj)
## Once NE
###############################################################################################
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall") # to qu
library(rJava)
library("RNetLogo")
options(java.parameters="-Xmx8000m")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_311') # path to Java folder
## Start NetLogo
nl.jarname = "netlogo-6.1.1.jar"
nl.path <- "C:/Program Files/NetLogo 6.1.1/app" # Path to Netlogo installation
#model.path<- "C:/SOGES/NETLOGO/SPIRALL/SPIRALL-NewDiets-Newwts.nlogo"
nl.obj<-"spirall"
NLStart(nl.path = nl.path, gui=T, nl.obj=nl.obj, nl.jarname = nl.jarname)
#NLLoadModel(model.path,nl.obj=nl.obj)
NLCommand("setup", nl.obj = "spirall")  ## Sets up SPIRALL
NLCommand("set-spin", nl.obj = "spirall")
NLDoCommand (240,"go", nl.obj = "spirall")  ## Runs SPIRALL for desired number of iterations (months)
#########################################################################
#########################################################################
NLQuit(nl.obj = "spirall") # to quit NetLogo
##NOTE: Once an instance of NetLogo has been opened, the program can be closed using the above command.
##St
shiny::runApp('C:/SOGES/report/Forest_simulations')
runApp('C:/SOGES/report/Forest_simulations')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_simulations')
runApp('C:/SOGES/report/Forest_sims')
source("C:/SOGES/report/Forest_sims/ui.R")
source("C:/SOGES/report/Forest_sims/server.R")
source("C:/SOGES/report/Forest_sims/ui.R")
runApp('C:/SOGES/report/Forest_sims')
source("C:/SOGES/report/Forest_sims/Page1.R")
runApp('C:/SOGES/report/Forest_sims')
runApp()
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
shiny::runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
shiny::runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
manage<-readRDS("C:/SOGES/report/Forest_sims/data/manage_change.rds")
manage$fire
plot(manage$fire[[1]])
plot(manage$fire[[2]])
plot(manage$fire[[3]])
plot(manage$fire[[4]])
plot(manage$fire[[5]])
plot(manage$fire[[6]])
plot(manage$water[[1]])
plot(manage$water[[2]])
plot(manage$water[[3]])
plot(manage$water[[4]])
plot(manage$water[[5]])
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
if(-0.3803291 < 0){TRUE}
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
round(-0.00812963)
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
shiny::runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
test<-raster("C:/SOGES/report/Forest_sims/data/top_carbon_AOI.tif")
test
test_pro<-projectRaster(test, crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
test_pro
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
leaflet()%>%
addTiles(group = "BaseMap") %>%
addRasterImage(incresults1()[[1]],
colors = pal(val), group = "Data")%>%
addLegend(pal = pal, values = dom, title = legend_title)%>%
addPolygons(data = county,
fillColor = "",
fillOpacity = 0,
color = "black",
layerId = ~ADMIN1, weight = 3, group = "County")%>%
# Layers control
addLayersControl(
baseGroups = c("BaseMap"),
overlayGroups = c("Data","County"),
options = layersControlOptions(collapsed = FALSE)
)
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
test<-readRDS("C:/SOGES/report/Forest_sims/data/increased_changes.rds")
calc(test$inc_change, sum, na.rm= TRUE)
cellStats(test$inc_change, sum, na.rm= TRUE)
ken<-readOGR("C:/GIS/SOGES/FEWS/KE_LHZ_2011/Kenya_pro.shp")
area(ken)
area(ken)* 10 ^ (-6)
cellStats(test$inc_change * 100, sum, na.rm= TRUE)/591179
x<-(cellStats(test$inc_change * 100, sum, na.rm= TRUE)/591179) * 100
x
x
str(x)
x<-data.frame((cellStats(test$inc_change * 100, sum, na.rm= TRUE)/591179) * 100)
x
x<-data.frame(y=(cellStats(test$inc_change * 100, sum, na.rm= TRUE)/591179) * 100)
x
dim9x)
dim(x)
barplot(x)
x$year<-rownames(x)
x
barplot(x)
barplot(x$y)
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
shiny::runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
shiny::runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp()
incresults3<-reactive({
temp_var<-ifelse(input$Management32 == "Do nothing", "N","Y")
#county_selected<-input$county13
dat_var<-NULL
dat_30<- incfor$all_inc
print(plot(dat_30))
names(dat_30)<-"2030"
if (temp_var == "N"){
da<-incfor$inc_change
dat<-da[[grep("_370", names(da))]]
dat_50<-dat[[grep("_50", names(dat))]]
dat_50[temp_na]<-NA
dat_50<-dat_50*mask
names(dat_50)<-"2050"
dat_100<-dat[[grep("_100", names(dat))]]
dat_100[temp_na]<-NA
names(dat_100)<-"2100"}
if (temp_var == "Y"){
da<-incfor$fire_change
dat<-da[[grep("_370", names(da))]]
dat_50<-dat[[grep("_50", names(dat))]]
dat_50[temp_na]<-NA
dat_50<-dat_50 * mask
names(dat_50)<-"2050"
dat_100<-dat[[grep("_100", names(dat))]]
dat_100[temp_na]<-NA
names(dat_100)<-"2100"}
dat_hist<-incfor$all
names(dat_hist)<-"2014"
dat_var<-stack(dat_hist,dat_30, dat_50, dat_100)
dat_var<-projectRaster(from = dat_var, to = pro_template, method = "ngb")
############################################################################################
## Create a table showing summaries of forest cover for each county in Current, 2030, 2050, 2100
if(input$County33 == "All"){
county_s <- county
print(county_s)
dat_county<-raster::crop(dat_var, county_s)
dat_sum<-as.data.frame(cellStats(dat_county, sum, na.rm = TRUE))
dat_sum$Year<-rownames(dat_sum)
colnames(dat_sum)[1]<-"Values"
torender<-data.frame("TIme Period" = c("Current forest cover", "Expanded forest cover in 2030",
"Change in forest cover in 2050 relative to current period",
"Change in forest cover in 2100 relative to current period"),
"Percent Forest Cover" = dat_sum$Values * 100 / 580367 * 100, check.names = FALSE)
}
if(input$County33 != "All"){
county_s <- county[county$ADMIN1 == input$County33, "ADMIN1"]
dat_county<-raster::crop(dat_var, county_s)
dat_sum<-as.data.frame(cellStats(dat_county, sum, na.rm = TRUE))
dat_sum$Year<-rownames(dat_sum)
colnames(dat_sum)[1]<-"Values"
torender<-data.frame("Time Period" = c("Current forest cover", "Expanded forest cover in 2030",
"Change in forest cover in 2050 relative to current cover",
"Change in forest cover in 2100 relative to current cover"),
"Percent Forest Cover" = dat_sum$Values * 100 / 580367 * 100, check.names = FALSE)
}
return(list (dat_var = dat_var, torender, county_s))
})
####################################################################################################
output$varchange331<-renderLeaflet({
library(leaflet)
f_hist<-incresults3()$dat_var[[1]]
print(f_hist)
f_30<-incresults3()$dat_var[[2]]
f_50<-incresults3()$dat_var[[3]]
f_100<-incresults3()$dat_var[[4]]
#################################################################################################
##################################################################################################
minval<-min(values(f_30),na.rm=TRUE)* 100
maxval<-max(values(f_30),na.rm=TRUE)* 100
dom<-c(minval, maxval)
val<-seq(minval,maxval)
if(minval < 0 & maxval > 0){
colorPal <- c(colorRampPalette(colors = c("#330000", "white"),
space = "Lab")(abs(minval)),
colorRampPalette(colors = c("white", "#003300"),
space = "Lab")(abs(maxval)))
pal<-colorNumeric(colorPal, dom, na.color = "NA")}
else {pal<-colorNumeric(colorRampPalette(colors = c("white", "#003300"),space = "Lab")(abs(maxval)), na.color = "NA", dom)}
legend_title<-"Forest cover (sq.km)"
############################################################################################
leaflet()%>%
addTiles(group = "BaseMap") %>%
addRasterImage(f_30,
colors = pal(val), group = "Expanded cover by 2030")%>%
addRasterImage(f_hist,
colors = pal(val), group = "Current cover")%>%
addLegend(pal = pal, values = dom, title = legend_title)%>%
addPolygons(data = county,
fillColor = "",
fillOpacity = 0,
color = "black",
layerId = ~ADMIN1, weight = 3, group = "County")%>%
addPolygons(data = incresults3()[[3]],
fillColor = "",
fillOpacity = 0,
color = "blue",
layerId = ~ADMIN1, weight = 3, group = "County")%>%
# Layers control
addLayersControl(
position = "bottomright",
baseGroups = c("BaseMap"),
overlayGroups = c("County","Expanded cover by 2030 (Unselect to see current forest cover)"),
options = layersControlOptions(collapsed = FALSE)
)
})
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp()
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
template<-raster("C:/GIS/SOGES/H_Soils/top_carbon_AOI.tif")
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
paste0(1:12)
paste(1:12)
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
paste(text1, "<br/>" ,text2)
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
runApp('C:/SOGES/report/Forest_sims')
